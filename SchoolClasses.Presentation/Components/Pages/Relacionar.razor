@page "/relacionar"
@rendermode InteractiveServer

@using Models.Response;
@using Models.Request;
@using Services;

<PageTitle>Alunos em turmas</PageTitle>

<h1 style="padding-bottom: 32px;">Alunos em turmas</h1>

<hr />

<h4>Adicionar alunos em uma turma: </h4>
<div class="d-flex align-items-md-end">
	<div class="d-flex flex-column m-2">
		<label>Turmas:</label>
		<select class="form-select" @onchange="GetAlunosByIdTurma">
			<option value="0">Turmas...</option>
			@if (lstTurmas != null)
			{
				@foreach (var turma in lstTurmas)
				{
					<option value="@turma.Id">@turma.Nome</option>
				}
			}
		</select>
	</div>
	<div class="d-flex flex-column m-2">
		<label>Alunos:</label>
		<select @bind="CurrentIdAlunoSelected" class="form-select">
			<option value="0">Alunos...</option>
			@if (lstAlunos != null)
			{
				@foreach (var aluno in lstAlunos)
				{
					<option value="@aluno.Id">@aluno.Nome</option>
				}
			}
		</select>
	</div>
	<button class="btn btn-success m-2" @onclick="@(()=>AddAlunoInTurma())">Adicionar</button>
</div>

@if (lstAlunosInTurma != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>Turma</th>
				<th>Ano</th>
				<th>Nome Curso</th>
				<th>Aluno</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var aluno in lstAlunosInTurma)
			{
				<tr>
					<td>@CurrentTurmaSelected.Nome</td>
					<td>@CurrentTurmaSelected.Ano</td>
					<td>@CurrentTurmaSelected.NomeCurso</td>
					<td>@aluno.Nome</td>
					<td>
						<button class="btn btn-danger" @onclick="@(() => DeleteAlunoInTurma(aluno.Id))">Excluir</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}



@code {
	private List<ViewTurma> lstTurmas = null;
	private List<ViewAluno> lstAlunos = null;
	private List<ViewAluno> lstAlunosInTurma = null;

	private ViewTurma CurrentTurmaSelected = null;
	private string CurrentIdAlunoSelected;

	protected override async Task OnInitializedAsync()
	{
		lstTurmas = await ServiceTurma.GetAll();
		lstAlunos = await ServiceAluno.GetAll();
	}

	private async void GetAlunosByIdTurma(ChangeEventArgs e)
	{
		string id = e.Value.ToString();
		if (id != "0")
		{
			CurrentTurmaSelected = lstTurmas.FirstOrDefault(x => x.Id.Equals(Convert.ToInt32(id)));
			lstAlunosInTurma = await ServiceAluno.GetByIdTurma(id);
			StateHasChanged();
		}
	}

	private async void AddAlunoInTurma()
	{
		if (await ServiceAlunoTurma.Add(new InputAlunoTurma
			{
				IdAluno = Convert.ToInt32(CurrentIdAlunoSelected),
				IdTurma = CurrentTurmaSelected.Id
			}))
		{
			lstAlunosInTurma = await ServiceAluno.GetByIdTurma(CurrentTurmaSelected.Id.ToString());
			StateHasChanged();
		}
	}

	private async void DeleteAlunoInTurma(int Id) { }
}
