@page "/turmas"
@attribute [StreamRendering]
@rendermode InteractiveServer

@using Models.Response;
@using Models.Request;
@using Services;

<PageTitle>Turmas</PageTitle>

<h1>Turmas</h1>

<div class="d-flex justify-content-end">
	<button class="btn btn-success">Novo turma</button>
</div>

@if (lstTurmas == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Nome</th>
				<th>Curso</th>
				<th>Ativo</th>
				<th>Ano</th>
				<th>Data Criação</th>
				<th></th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var turma in lstTurmas)
			{
				<tr>
					<td>@turma.Nome</td>
					<td>@turma.NomeCurso</td>
					<td>@turma.IsAtivo</td>
					<td>@turma.DtCriacao.ToString("dd/MM/yyyy")</td>
					<td>
						<button class="btn btn-info" @onclick="@(()=> ToggleActivate(turma.Id, turma.IsAtivo))">@((turma.IsAtivo) ? "Inativar" : "Ativar")</button>
					</td>
					<td>
						<button class="btn btn-warning" onclick="teste()">Alterar</button>
					</td>
					<td>
						<button class="btn btn-danger" @onclick="@(() => Delete(turma.Id))">Excluir</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private List<ViewTurma> lstTurmas = null;

	protected override async Task OnInitializedAsync()
	{
		lstTurmas = await ServiceTurma.GetAll();
		await Task.Delay(500);
	}

	private async Task Delete(int id)
	{
		if (await ServiceTurma.Delete(id.ToString()))
		{
			ViewTurma turmaExcluded = lstTurmas.FirstOrDefault(x => x.Id.Equals(id));
			if (turmaExcluded != null)
				lstTurmas.Remove(turmaExcluded);

			StateHasChanged();
		}
	}

	private async Task ToggleActivate(int id, bool isAtivo)
	{
		if (await ServiceTurma.ToggleActivate(id.ToString(), new ToggleActivate { IsAtivo = !isAtivo }))
		{
			ViewTurma turma = lstTurmas.FirstOrDefault(x => x.Id.Equals(id));
			if (turma != null)
				turma.IsAtivo = !isAtivo;

			StateHasChanged();
		}
	}

}
